"""Initial migration.

Revision ID: 327db84a1d89
Revises: 
Create Date: 2024-04-12 23:06:06.916165

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '327db84a1d89'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('auras',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('prodromes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('seizure_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('triggers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=64), nullable=False),
    sa.Column('last_name', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=64), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('birthdate', sa.Date(), nullable=False),
    sa.Column('menstruation', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    op.create_table('medications',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('dosage_mg', sa.Float(), nullable=False),
    sa.Column('reason_for_stop', sa.String(length=1000), nullable=True),
    sa.Column('frequency', sa.Float(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.CheckConstraint('dosage_mg >= 0', name='check_dosage'),
    sa.CheckConstraint('end_date IS NULL OR end_date IS NOT NULL AND start_date < end_date', name='check_start_before_end'),
    sa.CheckConstraint('frequency >= 0 and frequency <= 5', name='check_frequency'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('log_time', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('seizure_episodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('seizure_type_id', sa.Integer(), nullable=False),
    sa.Column('duration_sec', sa.Integer(), nullable=True),
    sa.Column('frequency', sa.Integer(), nullable=True),
    sa.Column('requires_emergency_intervention', sa.Boolean(), nullable=False),
    sa.Column('postictal_confusion_duration', sa.Float(), nullable=True),
    sa.Column('postictal_confusion_intensity', sa.Integer(), nullable=True),
    sa.Column('postictal_headache_duration', sa.Float(), nullable=True),
    sa.Column('postictal_headache_intensity', sa.Integer(), nullable=True),
    sa.Column('postictal_fatigue_duration', sa.Float(), nullable=True),
    sa.Column('postictal_fatigue_intensity', sa.Integer(), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.CheckConstraint('duration_sec >= 0', name='check_duration_positive'),
    sa.CheckConstraint('frequency >= 1', name='check_frequency_positive'),
    sa.CheckConstraint('postictal_confusion_duration >= 0', name='check_postictal_confusion_duration_positive'),
    sa.CheckConstraint('postictal_confusion_intensity BETWEEN 0 AND 10', name='check_postictal_confusion_intensity'),
    sa.CheckConstraint('postictal_fatigue_duration >= 0', name='check_postictal_fatigue_duration_positive'),
    sa.CheckConstraint('postictal_fatigue_intensity BETWEEN 0 AND 10', name='check_postictal_fatigue_intensity'),
    sa.CheckConstraint('postictal_headache_duration >= 0', name='check_postictal_headache_duration_positive'),
    sa.CheckConstraint('postictal_headache_intensity BETWEEN 0 AND 10', name='check_postictal_headache_intensity'),
    sa.ForeignKeyConstraint(['log_id'], ['user_logs.id'], ),
    sa.ForeignKeyConstraint(['seizure_type_id'], ['seizure_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_auras',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('aura_id', sa.Integer(), nullable=False),
    sa.Column('is_present', sa.Boolean(), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['aura_id'], ['auras.id'], ),
    sa.ForeignKeyConstraint(['log_id'], ['user_logs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_prodromes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('prodrome_id', sa.Integer(), nullable=False),
    sa.Column('intensity', sa.Integer(), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.CheckConstraint('intensity >= 0 and intensity <= 10', name='check_intensity'),
    sa.ForeignKeyConstraint(['log_id'], ['user_logs.id'], ),
    sa.ForeignKeyConstraint(['prodrome_id'], ['prodromes.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_triggers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('trigger_id', sa.Integer(), nullable=False),
    sa.Column('value_numeric', sa.Float(), nullable=True),
    sa.Column('value_boolean', sa.Boolean(), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.CheckConstraint('value_numeric >= 0', name='positive_trigger_value_numeric'),
    sa.ForeignKeyConstraint(['log_id'], ['user_logs.id'], ),
    sa.ForeignKeyConstraint(['trigger_id'], ['triggers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_triggers')
    op.drop_table('user_prodromes')
    op.drop_table('user_auras')
    op.drop_table('seizure_episodes')
    op.drop_table('user_logs')
    op.drop_table('medications')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    op.drop_table('triggers')
    op.drop_table('seizure_types')
    op.drop_table('prodromes')
    op.drop_table('auras')
    # ### end Alembic commands ###
